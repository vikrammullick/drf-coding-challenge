{"version":3,"sources":["Graph.js","App.js","serviceWorker.js","index.js"],"names":["Graph","state","intendedDepth","showGrid","isSignChange","a","b","getPixelBounds","i","j","granularity","magnitude","_this","props","randomNumber","min","max","Math","random","isValidPixel","eqn","pixelBounds","xMin","xMax","yMin","yMax","recursivelyGenerateGraph","x","y","width","factor","depth","react_default","createElement","style","backgroundColor","height","Array","fill","map","_","display","flexDirection","boxSizing","border","_this2","this","setInterval","showAnimation","setState","Component","graphs","circle","heart","pow","pattern","sin","cos","clover","wacky","ellipse","hyperbola","concentric_circles","PI","sqrt","App","type","handleGraphChange","event","target","value","_this$state","marginTop","alignItems","padding","borderRadius","Graph_Graph","marginBottom","onChange","Object","keys","key","lib_default","onToggle","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe2f415a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nconst gridSide = 500; //pixel width/height of graph view\n\nexport default class Graph extends Component {\n  state = {\n    intendedDepth: 9, //initial precision of graph\n    showGrid: false //whether grid lines are visible,\n  };\n  componentDidMount() {\n    // set 1 second timer to increment depth of recursion till 9, remove grid, and reset\n    setInterval(() => {\n      if (!this.props.showAnimation) {\n        this.setState({\n          intendedDepth: 9,\n          showGrid: false\n        });\n      } else if (!this.state.showGrid) {\n        this.setState({ showGrid: true, intendedDepth: 1 });\n      } else if (this.state.intendedDepth === 9) {\n        this.setState({ showGrid: false });\n      } else {\n        this.setState({ intendedDepth: this.state.intendedDepth + 1 });\n      }\n    }, 1000);\n  }\n  isSignChange = (a, b) => {\n    //return whether a and b have different signs\n    return (a >= 0 && b <= 0) || (a <= 0 && b >= 0);\n  };\n  getPixelBounds = (i, j, granularity) => {\n    const { magnitude } = this.props;\n    //get real value bounds of 'pixel' [[xMin,xMax],[yMin,yMax]]\n    return [\n      [\n        -1 * magnitude + (j * 2 * magnitude) / granularity,\n        -1 * magnitude + ((j + 1) * 2 * magnitude) / granularity\n      ],\n      [\n        magnitude - ((i + 1) * 2 * magnitude) / granularity,\n        magnitude - (i * 2 * magnitude) / granularity\n      ]\n    ];\n  };\n  randomNumber = (min, max) => {\n    return Math.random() * (max - min) + min;\n  };\n  isValidPixel = (i, j, granularity) => {\n    const { eqn } = this.props;\n\n    let pixelBounds = this.getPixelBounds(i, j, granularity);\n\n    let xMin = pixelBounds[0][0];\n    let xMax = pixelBounds[0][1];\n    let yMin = pixelBounds[1][0];\n    let yMax = pixelBounds[1][1];\n\n    //return whether a sign change occurs within 'pixel' by checking diagonal corners\n    if (\n      this.isSignChange(eqn(xMin, yMin), eqn(xMax, yMax)) ||\n      this.isSignChange(eqn(xMin, yMax), eqn(xMax, yMin))\n    ) {\n      return true;\n    }\n\n    //randomly sample 50 pairs of points to check for a possible sign change\n    for (let i = 0; i < 50; i++) {\n      if (\n        this.isSignChange(\n          eqn(this.randomNumber(xMin, xMax), this.randomNumber(yMin, yMax)),\n          eqn(this.randomNumber(xMin, xMax), this.randomNumber(yMin, yMax))\n        )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n  recursivelyGenerateGraph = (x, y, granularity, width, factor, depth) => {\n    //base case - draw shaded in pixel\n    if (depth === this.state.intendedDepth) {\n      return (\n        <div\n          style={{\n            backgroundColor: \"#499DF5\",\n            width: width,\n            height: width\n          }}\n        />\n      );\n    }\n    //further divide graph and if pixel is contained within square, re-call 'recursivelyGenerateGraph'\n    return (\n      <div>\n        {Array(factor)\n          .fill()\n          .map((_, i) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\"\n                }}\n              >\n                {Array(factor)\n                  .fill()\n                  .map((_, j) => {\n                    return (\n                      <div\n                        style={{\n                          display: \"flex\",\n                          boxSizing: \"border-box\",\n                          border:\n                            this.state.showGrid && depth <= 4\n                              ? \"1px solid lightGray\"\n                              : null,\n                          width: width / factor,\n                          height: width / factor,\n                          backgroundColor: \"white\"\n                        }}\n                      >\n                        {this.isValidPixel(\n                          x * factor + i,\n                          y * factor + j,\n                          granularity * factor\n                        )\n                          ? this.recursivelyGenerateGraph(\n                              x * factor + i,\n                              y * factor + j,\n                              granularity * factor,\n                              width / factor,\n                              factor,\n                              depth + 1\n                            )\n                          : null}\n                      </div>\n                    );\n                  })}\n              </div>\n            );\n          })}\n      </div>\n    );\n  };\n  render() {\n    return (\n      // begin with single square and recursively generate graph\n      this.recursivelyGenerateGraph(0, 0, 1, gridSide, 2, 0)\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ToggleButton from \"react-toggle-button\";\nimport Graph from \"./Graph\";\n\n// add implicit graphs equations here to try it out!!!\n// eqn is the equation in the form f(x,y) = 0\n// magnitude is the intended axes length for the graph\n\nconst graphs = {\n  circle: {\n    eqn: (x, y) => {\n      //implict function for a circle\n      return 1 - x * x - y * y;\n    },\n    magnitude: 1.1\n  },\n  heart: {\n    eqn: (x, y) => {\n      //implict function for a heart\n      return Math.pow(x * x + y * y - 1, 3) - x * x * y * y * y;\n    },\n    magnitude: 1.7\n  },\n  pattern: {\n    eqn: (x, y) => {\n      //implict function for a neat pattern\n      return Math.sin(x * x + y * y) - Math.cos(x * y);\n    },\n    magnitude: 3\n  },\n  clover: {\n    eqn: (x, y) => {\n      //implict function for a clover\n      return Math.pow(x * x + y * y, 3) - 12 * x * x * y * y;\n    },\n    magnitude: 2\n  },\n  wacky: {\n    eqn: (x, y) => {\n      //implicit function for wacky pattern\n      return Math.sin(x + 2 * Math.sin(y)) - Math.cos(y + 3 * Math.cos(x));\n    },\n    magnitude: 10\n  },\n  ellipse: {\n    eqn: (x, y) => {\n      //implict function for an ellipse\n      return 1 - (x * x) / 2 - y * y;\n    },\n    magnitude: 2\n  },\n  hyperbola: {\n    eqn: (x, y) => {\n      //implict function for a hyperbola\n      return 1 - x * x + y * y;\n    },\n    magnitude: 3\n  },\n  sin: {\n    eqn: (x, y) => {\n      //implict function for a sin curve\n      return y - Math.sin(x);\n    },\n    magnitude: 3\n  },\n  concentric_circles: {\n    eqn: (x, y) => {\n      //implict function for concentric circles\n      return Math.sin(Math.PI * Math.sqrt(x * x + y * y));\n    },\n    magnitude: 5\n  }\n};\n\nexport default class App extends Component {\n  state = {\n    type: \"circle\",\n    showAnimation: false\n  };\n  handleGraphChange = event => {\n    this.setState({ type: event.target.value });\n  };\n  render() {\n    const { type, showAnimation } = this.state;\n    return (\n      <div\n        style={{\n          marginTop: 50,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\"\n        }}\n      >\n        <div\n          style={{\n            width: 500,\n            padding: 20,\n            borderRadius: 20,\n            border: \"1px solid black\"\n          }}\n        >\n          {/* Graph component is below */}\n          <Graph\n            eqn={graphs[type].eqn}\n            magnitude={graphs[type].magnitude}\n            showAnimation={showAnimation}\n          />\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: 500,\n              marginTop: 20\n            }}\n          >\n            <text style={{ marginBottom: 5 }}>Choose Graph</text>\n            {/* Drop down to choose graph */}\n            <select value={type} onChange={this.handleGraphChange}>\n              {Object.keys(graphs).map(key => {\n                return <option value={key}>{key}</option>;\n              })}\n            </select>\n\n            <text style={{ marginTop: 5, marginBottom: 5 }}>\n              Toggle Animation\n            </text>\n            <ToggleButton\n              value={showAnimation}\n              onToggle={value => {\n                this.setState({ showAnimation: !value });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}